# Code Generated by Sidekick is for learning and experimentation purposes only.

import streamlit as st

from src.langgraphagenticai.ui.streamlitui.loadui import LoadStreamlitUI
from src.langgraphagenticai.LLMS.groqllm import GroqLLM
from src.langgraphagenticai.graph.graph_builder import PDFGraphBuilder
from src.langgraphagenticai.ui.streamlitui.display_result import DisplayResultStreamlit

def load_pdf_agenticai_app():
    ui = LoadStreamlitUI()
    user_input = ui.load_streamlit_ui()

    if not user_input:
        st.error("Error: Failed to load user input from the UI.")
        return

    pdf_file = user_input.get("pdf_file")
    usecase = user_input.get("selected_usecase")
    selected_llm = user_input.get("selected_llm")
    groq_api_key = user_input.get("GROQ_API_KEY")
    selected_groq_model = user_input.get("selected_groq_model")
    tavily_api_key = user_input.get("TAVILY_API_KEY")  # Always get this, may be None

    if selected_llm == "Groq" and (not groq_api_key or not selected_groq_model):
        st.warning("Please provide both GROQ API key and model.")
        return

    if usecase == "PDF Q&A":
        prompt_label = "Ask a question about the PDF"
    elif usecase == "Web Search":
        prompt_label = "Ask your query (web search)"
    else:
        prompt_label = "Ask your question"

    if usecase == "PDF Summarization":
        user_message = "summarize"
    else:
        user_message = st.text_input(prompt_label)

    # --- EDITED LOGIC BELOW ---
    if usecase == "Web Search":
        should_run = user_message and selected_llm == "Groq" and tavily_api_key
    elif usecase == "PDF Summarization":
        should_run = pdf_file and selected_llm == "Groq"
    else:
        should_run = user_message and pdf_file and selected_llm == "Groq"
    # --- END EDIT ---

    if should_run:
        obj_llm_config = GroqLLM(user_controls_input=user_input)
        model = obj_llm_config.get_llm_model()
        graph_builder = PDFGraphBuilder(model, tavily_api_key=tavily_api_key)
        graph = graph_builder.setup_graph(usecase)
        DisplayResultStreamlit(usecase, graph, user_message, pdf_file).display_result_on_ui()

if __name__ == "__main__":
    load_pdf_agenticai_app()
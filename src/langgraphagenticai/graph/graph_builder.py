# Code Generated by Sidekick is for learning and experimentation purposes only.
from langgraph.graph import StateGraph, START, END
from src.langgraphagenticai.state.state import State
from src.langgraphagenticai.nodes.pdf_chat_node import PDFChatNode
from src.langgraphagenticai.tools.pdf_tools import get_tools

class PDFGraphBuilder:
    def __init__(self, model, tavily_api_key=None):
        self.llm = model
        self.graph_builder = StateGraph(State)
        self.tools = get_tools(tavily_api_key)

    def build_pdf_qa_graph(self):
        pdf_chat_node = PDFChatNode(self.llm, tools=self.tools)
        self.graph_builder.add_node("pdf_chat", pdf_chat_node.process)
        self.graph_builder.add_edge(START, "pdf_chat")
        self.graph_builder.add_edge("pdf_chat", END)

    def build_pdf_summary_graph(self):
        pdf_chat_node = PDFChatNode(self.llm, tools=self.tools)
        self.graph_builder.add_node("pdf_summarize", pdf_chat_node.summarize)
        self.graph_builder.add_edge(START, "pdf_summarize")
        self.graph_builder.add_edge("pdf_summarize", END)

    def build_pdf_tool_search_graph(self):
        pdf_chat_node = PDFChatNode(self.llm, tools=self.tools)
        self.graph_builder.add_node("tool_search", pdf_chat_node.tool_search)
        self.graph_builder.add_edge(START, "tool_search")
        self.graph_builder.add_edge("tool_search", END)

    def setup_graph(self, usecase: str):
        if usecase == "PDF Q&A":
            self.build_pdf_qa_graph()
        elif usecase == "PDF Summarization":
            self.build_pdf_summary_graph()
        elif usecase == "PDF Web Search":
            self.build_pdf_tool_search_graph()
        return self.graph_builder.compile()
